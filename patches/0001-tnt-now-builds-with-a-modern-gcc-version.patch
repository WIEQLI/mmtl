From 8f594afeb12152da6127e862b05c5f65f3dc51d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lukas=20Sandstr=C3=B6m?= <luksan@gmail.com>
Date: Sat, 28 Jun 2014 14:46:33 +0200
Subject: [PATCH 1/2] tnt now builds with a modern gcc version

---
 bem/src/magicad.h        |  2 +-
 calcCAP/src/bicgstab.cpp |  2 +-
 calcCAP/src/calcCAP.cpp  |  4 +++-
 calcCAP/src/cmplxmat.cpp |  6 +++---
 calcCAP/src/cmplxvec.cpp |  6 +++---
 calcCAP/src/cmplxvec.h   |  1 +
 calcCAP/src/complex.cpp  |  2 ++
 calcCAP/src/complex.h    |  6 +++---
 calcCAP/src/data.cpp     |  2 +-
 calcCAP/src/diffrm.cpp   |  4 ++--
 calcCAP/src/ivectorl.cpp |  2 ++
 calcCAP/src/ivectorl.h   |  4 ++--
 calcCAP/src/prony.cpp    |  2 +-
 calcCAP/src/sparse.cpp   |  4 ++--
 calcCAP/src/stdafx.h     |  8 ++++----
 calcCAP/src/systsolv.cpp |  2 +-
 calcCAP/src/vector.h     |  6 ++++--
 calcRL/src/bicgstab.cpp  |  2 +-
 calcRL/src/calcRL.cpp    |  4 +++-
 calcRL/src/cmplxmat.cpp  |  6 +++---
 calcRL/src/cmplxmat.h    |  2 ++
 calcRL/src/cmplxvec.cpp  |  6 +++---
 calcRL/src/cmplxvec.h    |  6 ++++--
 calcRL/src/complex.cpp   |  2 ++
 calcRL/src/complex.h     |  6 +++---
 calcRL/src/data.cpp      |  2 +-
 calcRL/src/hankel.cpp    |  8 ++++----
 calcRL/src/ivectorl.cpp  |  2 ++
 calcRL/src/ivectorl.h    |  4 +++-
 calcRL/src/kelvin.cpp    | 28 ++++++++++++++--------------
 calcRL/src/matrix.h      |  2 ++
 calcRL/src/sparse.cpp    |  4 ++--
 calcRL/src/stdafx.h      |  8 ++++----
 calcRL/src/systsolv.cpp  |  2 +-
 calcRL/src/vector.h      |  6 ++++--
 35 files changed, 94 insertions(+), 69 deletions(-)

diff --git a/bem/src/magicad.h b/bem/src/magicad.h
index 3b21cfc..4850028 100755
--- a/bem/src/magicad.h
+++ b/bem/src/magicad.h
@@ -100,7 +100,7 @@
 #include <stdlib.h>
 #include <string.h>
 #ifdef __cplusplus
-#include <iostream.h>
+#include <iostream>
 #endif
 #include <limits.h>
 #if !defined(PATH_MAX) || defined(__hpux)
diff --git a/calcCAP/src/bicgstab.cpp b/calcCAP/src/bicgstab.cpp
index f6891b8..8aad8fb 100755
--- a/calcCAP/src/bicgstab.cpp
+++ b/calcCAP/src/bicgstab.cpp
@@ -9,7 +9,7 @@
 
 
 //#include "stdafx.h"
-#include <iostream.h>
+#include <iostream>
 #include <math.h>
 
 #include "vector.h"
diff --git a/calcCAP/src/calcCAP.cpp b/calcCAP/src/calcCAP.cpp
index ead05d1..74731ab 100755
--- a/calcCAP/src/calcCAP.cpp
+++ b/calcCAP/src/calcCAP.cpp
@@ -15,6 +15,8 @@
 #include <time.h>
 #include <stdio.h>
 
+#include <string.h>
+
 /********************** Global variables *******************/
 
    int     Nc, Nd;
@@ -287,7 +289,7 @@ int main ( int argc, char *argv[] )
       
       for ( i1 = 0; i1 < Nc; i1 ++ ) {
 	
-	sumc[i1] = cmplx( 0.0, 0.0 );
+	sumc[i1] = Complex( 0.0, 0.0 );
 
 	
 	for ( j1 = 0; j1 < Nw; j1 ++ ) {
diff --git a/calcCAP/src/cmplxmat.cpp b/calcCAP/src/cmplxmat.cpp
index 0f67bad..dd147db 100755
--- a/calcCAP/src/cmplxmat.cpp
+++ b/calcCAP/src/cmplxmat.cpp
@@ -378,7 +378,7 @@ Matrix CmplxMatrix::real() const {
   Matrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::real(elem(i,j));
+      result(i,j)=::real(elem(i,j))[0];
   return (result);
 }
 
@@ -387,7 +387,7 @@ Matrix CmplxMatrix::imag() const {
   Matrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::imag(elem(i,j));
+      result(i,j)=::imag(elem(i,j))[0];
   return (result);
 }
 
@@ -405,7 +405,7 @@ CmplxMatrix CmplxMatrix::conjg() const {
   CmplxMatrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::conjg(elem(i,j));
+      result(i,j)=::conjg(elem(i,j))[0];
   return (result);
 }
      
diff --git a/calcCAP/src/cmplxvec.cpp b/calcCAP/src/cmplxvec.cpp
index ea4ae8c..c276efc 100755
--- a/calcCAP/src/cmplxvec.cpp
+++ b/calcCAP/src/cmplxvec.cpp
@@ -287,7 +287,7 @@ CmplxVector CmplxVector::conjg() const {
  
  int n = d;
  CmplxVector tmp(n);
- for(int i = 0; i < n; i++)  tmp[i] = ::conjg(v[i]);
+ for(int i = 0; i < n; i++)  tmp[i] = ::conjg(v[i])[0];
  return (tmp);
 }
 
@@ -295,7 +295,7 @@ Vector CmplxVector::real() const {
  
  Vector tmp(d);
  int n = d;
- while(n--) tmp[n] = ::real(v[n]);
+ while(n--) tmp[n] = ::real(v[n])[0];
  return (tmp);
 }
 
@@ -303,7 +303,7 @@ Vector CmplxVector::imag() const {
  
  Vector tmp(d);
  int n = d;
- while(n--) tmp[n] = ::imag(v[n]);
+ while(n--) tmp[n] = ::imag(v[n])[0];
  return (tmp);
 }
 
diff --git a/calcCAP/src/cmplxvec.h b/calcCAP/src/cmplxvec.h
index 265ba61..e637591 100755
--- a/calcCAP/src/cmplxvec.h
+++ b/calcCAP/src/cmplxvec.h
@@ -19,6 +19,7 @@ public:
   CmplxVector(int=0);
   CmplxVector(int, double);
   CmplxVector(int, Complex);
+  inline CmplxVector(const Complex &a) { ::CmplxVector(1, a); };
   CmplxVector(const CmplxVector&);
   CmplxVector(const Vector&);
 
diff --git a/calcCAP/src/complex.cpp b/calcCAP/src/complex.cpp
index b527ce8..be7cf6a 100755
--- a/calcCAP/src/complex.cpp
+++ b/calcCAP/src/complex.cpp
@@ -3,6 +3,8 @@
 #include <math.h>
 #include "complex.h"
 
+using namespace std;
+
 /*********************** constructors *****************************/
 
 Complex::Complex(double r, double i)
diff --git a/calcCAP/src/complex.h b/calcCAP/src/complex.h
index 83d559e..9673335 100755
--- a/calcCAP/src/complex.h
+++ b/calcCAP/src/complex.h
@@ -1,7 +1,7 @@
 #ifndef _complex__h_
 #define _complex__h_
 
-#include <iostream.h>
+#include <iostream>
 
 class Complex
 {
@@ -34,8 +34,8 @@ class Complex
    friend Complex   pow(const Complex&, int&);
    friend Complex   pow(const double&, const Complex&);     
          
-   friend ostream& operator<<(ostream&, Complex&);
-   friend istream& operator>>(istream&, Complex&);
+   friend std::ostream& operator<<(std::ostream&, Complex&);
+   friend std::istream& operator>>(std::istream&, Complex&);
 
  public:
    Complex(){}                       // constructors
diff --git a/calcCAP/src/data.cpp b/calcCAP/src/data.cpp
index 37725e4..6037ad2 100755
--- a/calcCAP/src/data.cpp
+++ b/calcCAP/src/data.cpp
@@ -260,7 +260,7 @@ void getparam(char *inFile) {
       }
     }
     
-    Ic = cmplx( 0.0, 1.0 );
+    Ic = Complex( 0.0, 1.0 );
     
     Nc4 = 11*Nh+1;
     step_w = 1.0/power( 2.0, J );
diff --git a/calcCAP/src/diffrm.cpp b/calcCAP/src/diffrm.cpp
index 309b566..1e4a570 100755
--- a/calcCAP/src/diffrm.cpp
+++ b/calcCAP/src/diffrm.cpp
@@ -8,8 +8,8 @@
 
 //#include "stdafx.h"
 #include <math.h>
-#include <iostream.h>
-#include <iomanip.h>
+#include <iostream>
+#include <iomanip>
 #include <stdlib.h>
 
 #include "complex.h"
diff --git a/calcCAP/src/ivectorl.cpp b/calcCAP/src/ivectorl.cpp
index fea41a7..c6fea1b 100755
--- a/calcCAP/src/ivectorl.cpp
+++ b/calcCAP/src/ivectorl.cpp
@@ -3,6 +3,8 @@
 #include "ivectorl.h"
 //#include "stdafx.h"
 
+using namespace std;
+
 /*************************** constructors **************************/
 
 IVectorl::IVectorl(int n)  {
diff --git a/calcCAP/src/ivectorl.h b/calcCAP/src/ivectorl.h
index a8d98a4..d70e531 100755
--- a/calcCAP/src/ivectorl.h
+++ b/calcCAP/src/ivectorl.h
@@ -1,12 +1,12 @@
 #ifndef _IVectorl__h_
 #define _IVectorl__h_
-#include <iostream.h>
+#include <iostream>
 
 class IVectorl
 {
   friend class IMatrix;
   friend class IMatrix3d;
-  friend ostream& operator<<(ostream&, const IVectorl&);
+  friend std::ostream& operator<<(std::ostream&, const IVectorl&);
   friend IVectorl operator*(int, const IVectorl&); 
   friend int max(const IVectorl&);
   friend int min(const IVectorl&);
diff --git a/calcCAP/src/prony.cpp b/calcCAP/src/prony.cpp
index 6e8873e..97d74ea 100755
--- a/calcCAP/src/prony.cpp
+++ b/calcCAP/src/prony.cpp
@@ -1,6 +1,6 @@
 #include "stdafx.h"
 #include <math.h>
-#include <iomanip.h>
+#include <iomanip>
 #include <stdlib.h>
 #include "complex.h"
 #include "vector.h"
diff --git a/calcCAP/src/sparse.cpp b/calcCAP/src/sparse.cpp
index 1bebae9..ea11fe2 100755
--- a/calcCAP/src/sparse.cpp
+++ b/calcCAP/src/sparse.cpp
@@ -2,9 +2,9 @@
 
 //#include "stdafx.h"
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
 #include <stdlib.h>
-#include <iomanip.h>
+#include <iomanip>
 
 #include "complex.h" 
 #include "vector.h" 
diff --git a/calcCAP/src/stdafx.h b/calcCAP/src/stdafx.h
index b9b9569..5848427 100755
--- a/calcCAP/src/stdafx.h
+++ b/calcCAP/src/stdafx.h
@@ -2,11 +2,11 @@
 #define _stdafx__h_
 
 #include <math.h>
-#include <iostream.h>
-#include <iomanip.h>
-#include <fstream.h>
+#include <iostream>
+#include <iomanip>
+#include <fstream>
 #include <stdlib.h>
-#include <iomanip.h>
+#include <iomanip>
 
 #include "complex.h"
 #include "vector.h"
diff --git a/calcCAP/src/systsolv.cpp b/calcCAP/src/systsolv.cpp
index 3afa35f..eec6b9b 100755
--- a/calcCAP/src/systsolv.cpp
+++ b/calcCAP/src/systsolv.cpp
@@ -3,7 +3,7 @@
 
 //#include "stdafx.h"
 
-#include <iostream.h>
+#include <iostream>
 #include <math.h>
 #include <stdlib.h>
 #include "complex.h"
diff --git a/calcCAP/src/vector.h b/calcCAP/src/vector.h
index 68bcf57..bb3984d 100755
--- a/calcCAP/src/vector.h
+++ b/calcCAP/src/vector.h
@@ -1,8 +1,10 @@
 #ifndef _Vector__h_
 #define _Vector__h_
 
-#include <iostream.h>
-#include <iomanip.h>
+#include <iostream>
+#include <iomanip>
+
+using namespace std;
 
 class Vector
 {
diff --git a/calcRL/src/bicgstab.cpp b/calcRL/src/bicgstab.cpp
index b27cf4e..009181e 100755
--- a/calcRL/src/bicgstab.cpp
+++ b/calcRL/src/bicgstab.cpp
@@ -9,7 +9,7 @@
 
 
 //#include "stdafx.h"
-#include <iostream.h>
+#include <iostream>
 #include <math.h>
 
 #include "vector.h"
diff --git a/calcRL/src/calcRL.cpp b/calcRL/src/calcRL.cpp
index 17c1435..3087857 100755
--- a/calcRL/src/calcRL.cpp
+++ b/calcRL/src/calcRL.cpp
@@ -44,6 +44,8 @@ numerical techniques.
 #include <time.h>
 #include <stdio.h>
 
+#include <string.h>
+
 /********************** Global variables *******************/
 
    int     Nc, Die, Rec, Cir, Tri, Ell, Pol, Gnd, Tra;
@@ -564,7 +566,7 @@ int main ( int argc, char *argv[] )
 	tmp4 = Circum[i] / double(Nw);
 	tmpsum1 = 0.0;
 	tmpsum2 = 0.0;
-	sum2[i] = cmplx( 0.0, 0.0 );
+	sum2[i] = Complex( 0.0, 0.0 );
 	
 	for (j = 0; j < Nw; j ++) {
 	  
diff --git a/calcRL/src/cmplxmat.cpp b/calcRL/src/cmplxmat.cpp
index f903ada..6dabbd9 100755
--- a/calcRL/src/cmplxmat.cpp
+++ b/calcRL/src/cmplxmat.cpp
@@ -386,7 +386,7 @@ Matrix CmplxMatrix::real() const {
   Matrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::real(elem(i,j));
+      result(i,j)=::real(elem(i,j))[0];
   return (result);
 }
 
@@ -395,7 +395,7 @@ Matrix CmplxMatrix::imag() const {
   Matrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::imag(elem(i,j));
+      result(i,j)=::imag(elem(i,j))[0];
   return (result);
 }
 
@@ -413,7 +413,7 @@ CmplxMatrix CmplxMatrix::conjg() const {
   CmplxMatrix result(d_i,d_j);
   for(int i = 0; i < d_i; i++)
     for(int j = 0; j < d_j; j++)
-      result(i,j)=::conjg(elem(i,j));
+      result(i,j)=::conjg(elem(i,j))[0];
   return (result);
 }
      
diff --git a/calcRL/src/cmplxmat.h b/calcRL/src/cmplxmat.h
index 4ddeb8b..b47b25c 100755
--- a/calcRL/src/cmplxmat.h
+++ b/calcRL/src/cmplxmat.h
@@ -7,6 +7,8 @@
 #include "vector.h"
 #include "matrix.h"
 
+using namespace std;
+
 class CmplxMatrix
 {
   friend class Matrix;
diff --git a/calcRL/src/cmplxvec.cpp b/calcRL/src/cmplxvec.cpp
index 5d9aab3..28e235d 100755
--- a/calcRL/src/cmplxvec.cpp
+++ b/calcRL/src/cmplxvec.cpp
@@ -289,7 +289,7 @@ CmplxVector CmplxVector::conjg() const {
  
  int n = d;
  CmplxVector tmp(n);
- for(int i = 0; i < n; i++)  tmp[i] = ::conjg(v[i]);
+ for(int i = 0; i < n; i++)  tmp[i] = ::conjg(v[i])[0];
  return (tmp);
 }
 
@@ -297,7 +297,7 @@ Vector CmplxVector::real() const {
  
  Vector tmp(d);
  int n = d;
- while(n--) tmp[n] = ::real(v[n]);
+ while(n--) tmp[n] = ::real(v[n])[0];
  return (tmp);
 }
 
@@ -305,7 +305,7 @@ Vector CmplxVector::imag() const {
  
  Vector tmp(d);
  int n = d;
- while(n--) tmp[n] = ::imag(v[n]);
+ while(n--) tmp[n] = ::imag(v[n])[0];
  return (tmp);
 }
 
diff --git a/calcRL/src/cmplxvec.h b/calcRL/src/cmplxvec.h
index 4386bdc..38cd73c 100755
--- a/calcRL/src/cmplxvec.h
+++ b/calcRL/src/cmplxvec.h
@@ -3,6 +3,7 @@
 
 #include <stdlib.h>
 #include <math.h>
+#include <iostream>
 #include "complex.h"
 #include "vector.h"
 
@@ -10,8 +11,8 @@ class CmplxVector
 {
   friend class Complex;
   friend class CmplxMatrix;
-  friend ostream& operator<<(ostream&, const CmplxVector&);
-  friend istream& operator>>(istream&, CmplxVector&);
+  friend std::ostream& operator<<(std::ostream&, const CmplxVector&);
+  friend std::istream& operator>>(std::istream&, CmplxVector&);
   friend CmplxVector operator*(double, const CmplxVector&);
   friend CmplxVector operator*(const Complex&, const CmplxVector&);
   friend Complex inner(const CmplxVector&, const CmplxVector&);
@@ -21,6 +22,7 @@ public:
   CmplxVector(int=0);
   CmplxVector(int, double);
   CmplxVector(int, Complex);
+  inline CmplxVector(const Complex &a) { ::CmplxVector(1, a); };
   CmplxVector(const CmplxVector&);
   CmplxVector(const Vector&);
 
diff --git a/calcRL/src/complex.cpp b/calcRL/src/complex.cpp
index 3e6b05b..3db26e1 100755
--- a/calcRL/src/complex.cpp
+++ b/calcRL/src/complex.cpp
@@ -3,6 +3,8 @@
 #include <math.h>
 #include "complex.h"
 
+using namespace std;
+
 /*********************** constructors *****************************/
 
 Complex::Complex(double r, double i)
diff --git a/calcRL/src/complex.h b/calcRL/src/complex.h
index 000cc61..93475ad 100755
--- a/calcRL/src/complex.h
+++ b/calcRL/src/complex.h
@@ -3,7 +3,7 @@
 
 #include <stdlib.h>
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
 
 class Complex
 {
@@ -36,8 +36,8 @@ class Complex
    friend Complex   pow(const Complex&, int&);
    friend Complex   pow(const double&, const Complex&);     
          
-   friend ostream& operator<<(ostream&, Complex&);
-   friend istream& operator>>(istream&, Complex&);
+   friend std::ostream& operator<<(std::ostream&, Complex&);
+   friend std::istream& operator>>(std::istream&, Complex&);
 
  public:
    Complex(){}                       // constructors
diff --git a/calcRL/src/data.cpp b/calcRL/src/data.cpp
index d8e4fde..3551075 100755
--- a/calcRL/src/data.cpp
+++ b/calcRL/src/data.cpp
@@ -251,7 +251,7 @@ void getparam() {
       }
     }
     
-    Ic = cmplx( 0.0, 1.0 );
+    Ic = Complex( 0.0, 1.0 );
     
     Nc4 = 11*Nh+1;
     step_w = 1.0/power( 2.0, J );
diff --git a/calcRL/src/hankel.cpp b/calcRL/src/hankel.cpp
index 5c05f93..6ae2db0 100755
--- a/calcRL/src/hankel.cpp
+++ b/calcRL/src/hankel.cpp
@@ -19,7 +19,7 @@ Complex Hank20( double x ) {
 
    hank01( vj0, vy0, x, 1 );
 
-   return( cmplx( vj0, -vy0 ) );
+   return( Complex( vj0, -vy0 ) );
 }
 
 /***** Function Hank21 - to calculate H^(2)_1(x), x - double  ****/
@@ -30,7 +30,7 @@ Complex Hank21( double x ) {
 
    hank11( vj1, vy1, x, 1 );
 
-   return( cmplx( vj1, -vy1 ) );
+   return( Complex( vj1, -vy1 ) );
 }
 
 /***** Function Hank10 - to calculate H^(1)_0(x), x - double  ****/
@@ -41,7 +41,7 @@ Complex Hank10( double x ) {
 
    hank01( vj0, vy0, x, 1 );
 
-   return( cmplx( vj0, vy0 ) );
+   return( Complex( vj0, vy0 ) );
 }
 
 /***** Function Hank11 - to calculate H^(1)_1(x), x - double  ****/
@@ -52,7 +52,7 @@ Complex Hank11( double x ) {
 
    hank11( vj1, vy1, x, 1 );
 
-   return( cmplx( vj1, vy1 ) );
+   return( Complex( vj1, vy1 ) );
 }
 
 int hank01( double& vj0, double& vy0, double xd, int n ) {
diff --git a/calcRL/src/ivectorl.cpp b/calcRL/src/ivectorl.cpp
index eac7f25..4a264c4 100755
--- a/calcRL/src/ivectorl.cpp
+++ b/calcRL/src/ivectorl.cpp
@@ -3,6 +3,8 @@
 #include "ivectorl.h"
 //#include "stdafx.h"
 
+using namespace std;
+
 /*************************** constructors **************************/
 
 IVectorl::IVectorl(int n)  {
diff --git a/calcRL/src/ivectorl.h b/calcRL/src/ivectorl.h
index ffe62d6..de2e343 100755
--- a/calcRL/src/ivectorl.h
+++ b/calcRL/src/ivectorl.h
@@ -2,7 +2,9 @@
 #define _IVectorl__h_
 #include <stdlib.h>
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
+
+using namespace std;
 
 class IVectorl
 {
diff --git a/calcRL/src/kelvin.cpp b/calcRL/src/kelvin.cpp
index 166659e..e2f3923 100755
--- a/calcRL/src/kelvin.cpp
+++ b/calcRL/src/kelvin.cpp
@@ -332,20 +332,20 @@ double keip(double x) {
   return(keip);
 }
 
-static Complex  seta_p1 = cmplx(0.0,-0.3926991);
-static Complex  seta_p2 = cmplx(0.0110486,0.0);
-static Complex  seta_p3 = cmplx(0.0,-0.0009765);
-static Complex  seta_p4 = cmplx(-0.0000906,-0.0000901);
-static Complex  seta_p5 = cmplx(-0.0000252,0.0);
-static Complex  seta_p6 = cmplx(-0.0000034,0.0000051);
-static Complex  seta_p7 = cmplx(0.0000006,.0000019);
-static Complex  dphi_p1 = cmplx(0.7071068,0.7071068);
-static Complex  dphi_p2 = cmplx(-0.0625001,-0.0000001);
-static Complex  dphi_p3 = cmplx(-0.0013813,0.0013811);
-static Complex  dphi_p4 = cmplx(0.0000005,0.0002452);
-static Complex  dphi_p5 = cmplx(0.0000346,0.0000338);
-static Complex  dphi_p6 = cmplx(0.0000117,-0.0000024);
-static Complex  dphi_p7 = cmplx(0.0000016,-0.0000032);
+static Complex  seta_p1 = Complex(0.0,-0.3926991);
+static Complex  seta_p2 = Complex(0.0110486,0.0);
+static Complex  seta_p3 = Complex(0.0,-0.0009765);
+static Complex  seta_p4 = Complex(-0.0000906,-0.0000901);
+static Complex  seta_p5 = Complex(-0.0000252,0.0);
+static Complex  seta_p6 = Complex(-0.0000034,0.0000051);
+static Complex  seta_p7 = Complex(0.0000006,.0000019);
+static Complex  dphi_p1 = Complex(0.7071068,0.7071068);
+static Complex  dphi_p2 = Complex(-0.0625001,-0.0000001);
+static Complex  dphi_p3 = Complex(-0.0013813,0.0013811);
+static Complex  dphi_p4 = Complex(0.0000005,0.0002452);
+static Complex  dphi_p5 = Complex(0.0000346,0.0000338);
+static Complex  dphi_p6 = Complex(0.0000117,-0.0000024);
+static Complex  dphi_p7 = Complex(0.0000016,-0.0000032);
 
 
 
diff --git a/calcRL/src/matrix.h b/calcRL/src/matrix.h
index a317d9d..5b9fef0 100755
--- a/calcRL/src/matrix.h
+++ b/calcRL/src/matrix.h
@@ -5,6 +5,8 @@
 #include <math.h>
 #include "vector.h"
 
+using namespace std;
+
 class Matrix
 {
   friend class Matrix3d;
diff --git a/calcRL/src/sparse.cpp b/calcRL/src/sparse.cpp
index c679212..907eb98 100755
--- a/calcRL/src/sparse.cpp
+++ b/calcRL/src/sparse.cpp
@@ -1,9 +1,9 @@
 /******* functions, needed for sparse matrices  *******/
 
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
 #include <stdlib.h>
-#include <iomanip.h>
+#include <iomanip>
 
 #include "complex.h" 
 #include "vector.h" 
diff --git a/calcRL/src/stdafx.h b/calcRL/src/stdafx.h
index 044fe72..85b7e2b 100755
--- a/calcRL/src/stdafx.h
+++ b/calcRL/src/stdafx.h
@@ -2,11 +2,11 @@
 #define _stdafx__h_
 
 #include <math.h>
-#include <iostream.h>
-#include <iomanip.h>
-#include <fstream.h>
+#include <iostream>
+#include <iomanip>
+#include <fstream>
 #include <stdlib.h>
-#include <iomanip.h>
+#include <iomanip>
 
 #include "complex.h"
 #include "vector.h"
diff --git a/calcRL/src/systsolv.cpp b/calcRL/src/systsolv.cpp
index 627701e..4e55f04 100755
--- a/calcRL/src/systsolv.cpp
+++ b/calcRL/src/systsolv.cpp
@@ -2,7 +2,7 @@
      /*****Source - "NUMERICAL RECIPES IN C", www.nr.com*****/
 
 //#include "stdafx.h"
-#include <iostream.h>
+#include <iostream>
 #include <math.h>
 #include <stdlib.h>
 #include "complex.h"
diff --git a/calcRL/src/vector.h b/calcRL/src/vector.h
index caed073..1ed34ce 100755
--- a/calcRL/src/vector.h
+++ b/calcRL/src/vector.h
@@ -3,8 +3,10 @@
 
 #include <stdlib.h>
 #include <math.h>
-#include <iostream.h>
-#include <iomanip.h>
+#include <iostream>
+#include <iomanip>
+
+using namespace std;
 
 class Vector
 {
-- 
1.8.5.5

